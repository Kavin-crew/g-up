Material UI notes
https://www.youtube.com/playlist?list=PLC3y8-rFHvwh-K9mDlrrcDywl7CeVL2rO

1. Typography
    - variant props = h1-h6
    - variant props = subtitle1 - subtitle2
    - variant props = body1 - body2 , body1 is the default variant of the Typography component

    - component - example value will be h1 to h6, it will have same design but in html it will display the component as h1 for semantic html
    - gutterBottom - is usually false, but once included as props it will add margin-bottom

2. Buttons - native anchor links
    -variant props - text, contained, outline
        - in using text varient, it will accept an href props to make it an anchor tag in the html
    
    - color props = primary, secondary, error, warning, info, success
    - size props = small, medium, large
    - disableElevation props
    - disableRipple props
    - onClick - usual onClick in react

    ----------for icons------------
    npm install @mui/icons-material
    - startIcon = {<SendIcon/>}
    - endIcon = {<SendIcon/>}

2.1 IconButton - button that only have icons alone
    <IconButton aria-label="send">
        <SendIcon/>
    </IconButton>

3. Stack - 1 dimentional, be default its in column direction
    attibutes = spacing, direction, display
    value of 1 is equivalent to 8px

3.1 Divider - will add a line as divider
    <Divider orientation="vertical" flexItem />


4. ButtonGroup - place all buttons inside the button ButtonGroup, u may add the props in this component instead of each buttons
                EXCEPT for onClick
                - advised to put a aria-label
                - variant same as buttons
                - orientation = vertical

5. ToggleButtonGroup, ToggleButton
        const [format, setFormat] = useState([]);

        function handleFormatChange(e, updatedFormat){
            setFormat(updatedFormat)
        }

        <ToggleButtonGroup 
            aria-label="text formatting" 
            value="format" 
            onChange="handleFormatChange" 
            size="small"
            color="success"
            orientation="vertical"
            exclusive>
            <ToggleButton value="bold" aria-label="bold">Button 1</ToggleButton>
            <ToggleButton value="italic" aria-label="italic">Button 2</ToggleButton>
            <ToggleButton value="underlined" aria-label="underlined">Button 3</ToggleButton>
        </ToggleButtonGroup>

    //exclusive props only allows 1 option to be active, make the state also a single value

6. TextField - its like an input tag in html, by default variant is outlined
        -variant props = outlined, filled, standard
        -size = small, medium, large
        -color = primary, or some color in the pallete
        -required
        -helperText = message that will display below the TextField
        -type = Password, Email and so on
        -inputProps = {{readOnly: true;}}

6.1 InputAdornment - we can also add icon component for InputAdornment
        const [value,setValue] = useState('')

        <TextField name="Amount" inputProps={{
            startAdornment: <InputAdornment position="start">$<InputAdornment/>
        }}/>

        <TextField name="Amount" inputProps={{
            startAdornment: <InputAdornment position="end">kg<InputAdornment/>
        }}/>

        <TextField
        type="Password"
        value={value} 
        onChange={e => setValue(e.target.value)
        error={!value ? "Required" : "Do not share your password"}}
        />

7. Box - like a generic div tag
        <Box
        component
        props={span} 
        bgcolor='success.light',
        p={2} //2 means 16px
        sx={{
            backgroundColor: 'primary.main',
            '&:hover': {
                backgroundColor: 'primary.light'
            }
        }}
        ></Box>

7.1 Select - 
7.2 MenuItem - 
        const [country,setCountry] = useState('');

        const handleCountry(e){
            const value = e.target.value;
            setCountry(typeof value === 'string' ? value.split(',') : value)

        }

        <TextField
        label="Select Country"
        select value="country"
        onChange={handleCountry}
        SelectProps={{
            multiple: true
        }}>
            <MenuItem value="IN">India<MenuItem/>
            <MenuItem value="SIN">Singapore<MenuItem/>
            <MenuItem value="FR">France<MenuItem/>
        <TextField/>

8. Radio Button
        <Box>
        <FormControl>
            <FormLabel id="job-experience-group-label">Years of experience</FormLabel>
            <RadioGroup
            name="job-experience-group"
            aria-labelledby="job-experience-group-label"
            value={value}
            onChange={e => setValue(e.target.value)}
            row
            >
                <FormControlLabel control={<Radio size="small" color="primary"/>} label="0-2" value="0-2"/>
                <FormControlLabel control={<Radio size="small" color="primary"/>} label="3-4" value="3-4"/>
                <FormControlLabel control={<Radio size="small" color="primary"/>} label="5-10" value="5-10"/>
            </RadioGroup>
        </FormControl>
        </Box>;

9. CheckBox Button
    //single CheckBox
    <Box>
        <FormControlLabel
        label="I accept terms and condition"
        control={<CheckBox checked={value} onChange={e => setValue(e.target.checked)}/>}
        >
        </FormControlLabel>
    </Box>

    //checkbox icons
    <Box>
        <CheckBox 
        icon={<BookmarkBoderIcon/>}
        checkedIcon={<BookmarkIcon/>}
        checked="value"
        onChange={e => setValue(e.target.value)}
        />
    </Box>

    //multiple checkbox
    const handleCheck(e){
    const index = skills.indexOf(e.target.value)

    if(index === -1) setSkills([...skills, e.target.value])
    else setSkills(skills.filter(skill => skill !== e.target.value))
    }

    <FormControl error>
    <FormLabel>Skills</FormLabel>
    <FormGroup>
        <FormControlLabel
        label="HTML"
        control={<CheckBox checked={skills.includes('html')} value="HTML" onChange={handleCheck} />}
        />
        <FormControlLabel
        label="CSS"
        control={<CheckBox checked="" value="CSS" onChange={handleCheck} />}
        />
        <FormControlLabel
        label="JavaScript"
        control={<CheckBox checked="" value="JavaScript" onChange={handleCheck} />}
        />
    </FormGroup>
    <FormHelperText>Invalid selection</FormHelperText/>
    </FormControl>

10. Switch - toggle like on/off - example is Dark Mode
            <FormLabel label="Dark Mode" control={<Switch checked={value} onChange={e => e.target.value}/>}></FormLabel>

11. Rating - star rating, it accept e and newValue
            const handleChange(e, newValue){
                setValue(newValue)
            }
            <Stack>
                <Rating 
                value={value} 
                onChange={handleChange} 
                precision="0.5"
                icon={<FavoriteIcon fontSize="inherit"/>}
                emptyIcon={<FavoriteBorderIcon fontSize="inherit"/>}
                readOnly
                highlightSelectedOnly
                />
            </Stack>

12. Autocomplete - its like a combobox
    const skills = ['html', 'css', 'javascript', 'react']

    <Autocomplete 
    options={skills} 
    renderInput={(params) => <TextField {...params} 
    label={skills}/>}
    freeSolo
    />

13. Grid - 2 variation = grid container and grid item as children
         - uses flexbox
         - consist of 12 columns
         - each item in the grid can take up one or more columns as its width
         - five breakpoints = xs for mobile, sm for tablet, md for desktop, lg and lx for larger monitors
         - can assign integer values to each breakpoint which indicates how many of the 12 available columns
         example: xs='auto' occupy only its needed space line display inline-block

        <Grid container spacing="2"> 
        <Grid item xs={6}>
            <Box>Item 1</Box>
        </Grid>
        <Grid item xs={6}>
            <Box>Item 2</Box>
        </Grid>
        <Grid item xs={6}>
            <Box>Item 3</Box>
        </Grid>
        <Grid item xs={6}>
            <Box>Item 4</Box>
        </Grid>
        </Grid>

14. Paper - used the card, like an login form w/ drop-shadow, has default backgroundColor white
            <Paper sx={{padding: '32px'}} elevation={4}></Paper>

15. Cards - 
    <Box>
        <Card>
            <CardMedia 
            component="img"
            image="images/img1.jpg"
            alt="alt"
            />
            <CardContent>
            <Typography gutterBottom variant="h5">
                React
            </Typography>
            <Typography variant="body2" color="text.secondary">
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus libero suscipit dolorem ratione nihil, debitis maiores consectetur eius recusandae veniam!
            </Typography>
            </CardContent>
            <CardActions>
            <Button>Share</Button>
            <Button>Learn More</Button>
            </CardActions>
        </Card>
    </Box>

16. Accordion
        const [expanded, setExpanded] = useState(false);
        const handleChange(isExpanded, panel){
            setExpanded(isExpanded ? panel : false);
        }
        <>
        <Accordion expanded={expanded === "panel1"} onChange={(e, isExpanded)=> handleChange(isExpanded, 'panel1')}>
            <AccordionSummary
            id="panel1-header"
            aria-controls="panel1-content"
            expandIcon={<ExpandMoreIcon />}
            >
            <Typography variant="h2">Heading Text 1</Typography>
            </AccordionSummary>
            <AccordionDetails>
            <Typography>
                Lorem ipsum dolor sit amet consectetur, adipisicing elit. Doloribus
                consectetur, vitae sequi praesentium fugiat tenetur provident assumenda
                ad explicabo tempore?
            </Typography>
            </AccordionDetails>
        </Accordion>

        <Accordion expanded={expanded === "panel2"} onChange={(e, isExpanded)=> handleChange(isExpanded, 'panel2')}>
            <AccordionSummary
            id="panel2-header"
            aria-controls="panel2-content"
            expandIcon={<ExpandMoreIcon />}
            >
            <Typography variant="h2">Heading Text 2</Typography>
            </AccordionSummary>
            <AccordionDetails>
            <Typography>
                Lorem ipsum dolor sit amet consectetur, adipisicing elit. Doloribus
                consectetur, vitae sequi praesentium fugiat tenetur provident assumenda
                ad explicabo tempore?
            </Typography>
            </AccordionDetails>
        </Accordion>
        </>;

17. ImageList 
        variant attibute = woven, masonry
        
        <Stack spacing={4}>
        <ImageList sx={{ width: 500 }} cols={3} rowHeight={164}>
            {itemData.map(item => (
            <ImageListItem key={item.title}>
                <img
                srcSet={`${item.img}?w=500&fit=crop&auto=format&dpr=2 2x`}
                src={`${item.img}?w=500&fit=crop&auto=format`}
                alt={item.title}
                loading="lazy"
                />
            </ImageListItem>
            ))}
        </ImageList>
        </Stack>

18. Menu - its a dropdown in the menu
        const [anchorEl, setAnchorEl] = useState(null);
        const open = Boolean(anchorEl)

        const handleOpenDropdown(e){
            setAnchorEl(e.currentTarget)
        }

        const handleCloseDropdown(){
            setAnchorEl(null)
        }

        <Button
        id="services-button"
        onClick={handleOpenDropdown}
        aria-control={open ? "services-menu" : undefined}
        aria-haspopup="true"
        aria-expanded={open ? "true" : undefined}
        >Services<Button/>

        <Menu 
        id="services-menu" 
        anchorEl={anchorEl} 
        open={open} 
        onClose={handleCloseDropdown}
        MenuListProps={{
            'aria-labelledby' : "services-button"
        }}>
            <MenuItem>Dropdown 1<MenuItem/>
            <MenuItem>Dropdown 1<MenuItem/>
        <Menu/>

19. Link - like an a tag , use cases is for the breadcrumbs
    <Link href="#">Link Here</Link>

20. Breadcrumbs - separator can be icon
    <Box>
      <Breadcrumbs
        aria-label="breadcrumbs"
        separator="-"
        maxItems={3}
        itemsBeforeCollapse={3}
      >
        <Link href="#" underline="hover">
          Home
        </Link>
        <Link href="#" underline="hover">
          Categories
        </Link>
        <Typography color="text.primary">Account</Typography>
      </Breadcrumbs>
    </Box>
    
21. Drawer - hamburger
        const [open, setOpen] = useState(false);
        <>
        <IconButton
            size="large"
            aria-label="hamburger"
            edge="start"
            color="inherit"
            onClick={() => setOpen(true)}
        >
            <MenuIcon />
        </IconButton>
        <Drawer anchor="right" open={open} onClose={() => setOpen(false)}>
            <Box p={2} width="340px" textAlign="center" role="presentation">
            <Typography variant="h4">G-UP</Typography>
            </Box>
        </Drawer>
        </>

22. SpeedDial - its like a helper buttons example for copy print and share
    <SpeedDial
      ariaLabel="navigation speed dial"
      sx={{ position: 'fixed', bottom: 16, right: 16 }}
      icon={<SpeedDialIcon openIcon={<EditIcon />} />}
    >
      <SpeedDialAction icon={<CopyIcon />} tooltipTitle="Copy" tooltipOpen />
      <SpeedDialAction icon={<PrintIcon />} tooltipTitle="Print" tooltipOpen />
      <SpeedDialAction icon={<ShareIcon />} tooltipTitle="Share" tooltipOpen />
    </SpeedDial>

23. BottomNavigation - like a bottom navigation on mobile view
    const [value, setValue] = useState(0);
    <BottomNavigation
      sx={{ width: '100%' }}
      value={value}
      onChange={(e, newValue) => setValue(newValue)}
    >
      <BottomNavigationAction label="Home" icon={<HomeIcon />} />
      <BottomNavigationAction label="Favorite" icon={<FavoriteIcon />} />
      <BottomNavigationAction label="Profile" icon={<PersonIcon />} />
    </BottomNavigation>

24. Avatar - 
      <Avatar variant="square">KFA</Avatar>
      <Avatar variant="square" src="" sx={{ width: 20, height: 20 }}>
        KFA
      </Avatar>
      <AvatarGroup max={3}></AvatarGroup>

25. Badge - notification icon
       <Stack direction="row" spacing={2}>
        <Badge badgeContent={5} color="primary">
          <MailIcon />
        </Badge>
        <Badge badgeContent={5} color="secondary" showZero>
          <MailIcon />
        </Badge>
        <Badge badgeContent={100} color="secondary" max={100}>
          <MailIcon />
        </Badge>
        <Badge variant="dot" color="secondary" invisible={unreadEmails.length === 0}>
          <MailIcon />
        </Badge>
      </Stack>

26. List -
    https://www.youtube.com/watch?v=_KLCLlRYlx8

27. Chip - more like filter options
    <Chip label="Small" size="small" />
    <Chip label="Small" size="small" variant="outlined" />

28. Tooltip
    <Tooltip
        title="mail"
        placement="right"
        arrow
        enterDelay={500}
        leaveDelay={200}
      >
        <IconButton>
          <MailIcon />
        </IconButton>
      </Tooltip>

29. Table - https://www.youtube.com/watch?v=qk2oY7W3fuY

30. Alert - 
    <Alert severity="error">This is an error alert — check it out!</Alert>
    <Alert severity="warning">This is a warning alert — check it out!</Alert>
    <Alert severity="info">This is an info alert — check it out!</Alert>
    <Alert severity="success">This is a success alert — check it out!</Alert>

    <Alert severity="error">
    <AlertTitle>Error</AlertTitle>
    This is an error alert — <strong>check it out!</strong>
    </Alert>

31. Snackbar - similar to alert but in bottom area

32. Dialog - modal
    https://www.youtube.com/watch?v=_Rz2p3rjBvY

33. Progress - a loader
    <CircularProgress color="secondary" />
    <CircularProgress color="success" />
    <CircularProgress color="inherit" />

    <LinearProgress color="secondary" />
    <LinearProgress color="success" />
    <LinearProgress color="inherit" />

34. Skeleton - loader for contents
    {/* For variant="text", adjust the height via font-size */}
    <Skeleton variant="text" sx={{ fontSize: '1rem' }} />

    {/* For other variants, adjust the size with `width` and `height` */}
    <Skeleton variant="circular" width={40} height={40} />
    <Skeleton variant="rectangular" width={210} height={60} />
    <Skeleton variant="rounded" width={210} height={60} />

35. Lab package - components that are in staging/development
    npm i @mui/lab

35.1 LoadingButton - button thats being used in fetching data or loading data or some sort
      <LoadingButton variant="outlined">Submit</LoadingButton>
      <LoadingButton loading variant="outlined" loadingIndicator="Loading...">
        Submit
      </LoadingButton>

      <LoadingButton variant="outlined" loadingPosition="start" startIcon={<SaveIcon/>}>Submit</LoadingButton>
      <LoadingButton loading variant="outlined" loadingPosition="start" startIcon={<SaveIcon/>}>
        Submit
      </LoadingButton>

35.2 DateTimePicker
        https://mui.com/x/react-date-pickers/getting-started/#installation

        import { LocalizationProvider } from '@mui/x-date-pickers';
        import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(
        <React.StrictMode>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
            <App />
            </LocalizationProvider>
        </React.StrictMode>
        );

        -- in the desired component, to call the date picker, just invoke <DatePicker /> component

35.3 DateRangePicker
    https://mui.com/x/react-date-pickers/date-range-picker/

    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <DemoContainer components={['DateRangePicker']}>
        <DateRangePicker localeText={{ start: 'Check-in', end: 'Check-out' }} />
      </DemoContainer>
    </LocalizationProvider>

35.4 Tabs
    <TabContext value={value}>
    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <TabList onChange={handleChange} aria-label="lab API tabs example">
        <Tab label="Item One" value="1" />
        <Tab label="Item Two" value="2" />
        <Tab label="Item Three" value="3" />
        </TabList>
    </Box>
    <TabPanel value="1">Item One</TabPanel>
    <TabPanel value="2">Item Two</TabPanel>
    <TabPanel value="3">Item Three</TabPanel>
    </TabContext>

35.5 Timeline - https://mui.com/material-ui/react-timeline/

35.6 Masonry - https://mui.com/material-ui/react-masonry/

35.7 Responsiveness
    xs, extra-small: 0px
    sm, small: 600px
    md, medium: 900px
    lg, large: 1200px
    xl, extra-large: 1536px

35.8 Customizing Theme - https://mui.com/material-ui/customization/default-theme/
    - in App.js 
    
    import {createTheme} from '@mui/material'