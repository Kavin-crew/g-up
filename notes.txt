Material UI notes
1. Typography
- variant attribute = h1-h6
- variant attribute = subtitle1 - subtitle2
- variant attribute = body1 - body2 , body1 is the default variant of the Typography component

- component - example value will be h1 to h6, it will have same design but in html it will display the component as h1 for semantic html
- gutterBottom - is usually false, but once included as attribute it will add margin-bottom

2. Buttons - native anchor links
    -variant attribute - text, contained, outline
        - in using text varient, it will accept an href attribute to make it an anchor tag in the html
    
    - color attribute = primary, secondary, error, warning, info, success
    - size attribute = small, medium, large
    - disableElevation attribute
    - disableRipple attribute
    - onClick - usual onClick in react

    ----------for icons------------
    npm install @mui/icons-material
    - startIcon = {<SendIcon/>}
    - endIcon = {<SendIcon/>}

2.1 IconButton - button that only have icons alone
    <IconButton aria-label="send">
        <SendIcon/>
    </IconButton>

3. Stack - attibutes = spacing, direction, display

4. ButtonGroup - place all buttons inside the button ButtonGroup, u may add the props in this component instead of each buttons
                EXCEPT for onClick
    - advised to put a aria-label
    - variant same as buttons
    - orientation = vertical

5. ToggleButtonGroup, ToggleButton
    const [format, setFormat] = useState([]);

    function handleFormatChange(e, updatedFormat){
        setFormat(updatedFormat)
    }

    <ToggleButtonGroup 
        aria-label="text formatting" 
        value="format" 
        onChange="handleFormatChange" 
        size="small"
        color="success"
        orientation="vertical"
        exclusive>
        <ToggleButton value="bold" aria-label="bold">Button 1</ToggleButton>
        <ToggleButton value="italic" aria-label="italic">Button 2</ToggleButton>
        <ToggleButton value="underlined" aria-label="underlined">Button 3</ToggleButton>
    </ToggleButtonGroup>

    //exclusive props only allows 1 option to be active, make the state also a single value

6. TextField - its like an input tag in html, by default variant is outlined
    -variant attribute = outlined, filled, standard
    -size = small, medium, large
    -color = primary, or some color in the pallete
    -required
    -helperText = message that will display below the TextField
    -type = Password, Email and so on
    -inputProps = {{readOnly: true;}}

6.1 InputAdornment - we can also add icon component for InputAdornment
    const [value,setValue] = useState('')

    <TextField name="Amount" inputProps={{
        startAdornment: <InputAdornment position="start">$<InputAdornment/>
    }}/>

    <TextField name="Amount" inputProps={{
        startAdornment: <InputAdornment position="end">kg<InputAdornment/>
    }}/>

    <TextField
    type="Password"
    value={value} 
    onChange={e => setValue(e.target.value)
    error={!value ? "Required" : "Do not share your password"}}
    />

7. Box - like a generic div tag
7.1 Select - 
7.2 MenuItem - 
    const [country,setCountry] = useState('');

    const handleCountry(e){
        const value = e.target.value;
        setCountry(typeof value === 'string' ? value.split(',') : value)

    }

    <TextField
    label="Select Country"
    select value="country"
    onChange={handleCountry}
    SelectProps={{
        multiple: true
    }}>
        <MenuItem value="IN">India<MenuItem/>
        <MenuItem value="SIN">Singapore<MenuItem/>
        <MenuItem value="FR">France<MenuItem/>
    <TextField/>

8. Radio Button
<Box>
  <FormControl>
    <FormLabel id="job-experience-group-label">Years of experience</FormLabel>
    <RadioGroup
      name="job-experience-group"
      aria-labelledby="job-experience-group-label"
      value={value}
      onChange={e => setValue(e.target.value)}
      row
    >
        <FormControlLabel control={<Radio size="small" color="primary"/>} label="0-2" value="0-2"/>
        <FormControlLabel control={<Radio size="small" color="primary"/>} label="3-4" value="3-4"/>
        <FormControlLabel control={<Radio size="small" color="primary"/>} label="5-10" value="5-10"/>
    </RadioGroup>
  </FormControl>
</Box>;

9. CheckBox Button
    //single CheckBox
    <Box>
        <FormControlLabel
        label="I accept terms and condition"
        control={<CheckBox checked={value} onChange={e => setValue(e.target.checked)}/>}
        >
        </FormControlLabel>
    </Box>

    //checkbox icons
    <Box>
        <CheckBox 
        icon={<BookmarkBoderIcon/>}
        checkedIcon={<BookmarkIcon/>}
        checked="value"
        onChange={e => setValue(e.target.value)}
        />
    </Box>

    //multiple checkbox
    const handleCheck(e){
    const index = skills.indexOf(e.target.value)

    if(index === -1) setSkills([...skills, e.target.value])
    else setSkills(skills.filter(skill => skill !== e.target.value))
    }

    <FormControl error>
    <FormLabel>Skills</FormLabel>
    <FormGroup>
        <FormControlLabel
        label="HTML"
        control={<CheckBox checked={skills.includes('html')} value="HTML" onChange={handleCheck} />}
        />
        <FormControlLabel
        label="CSS"
        control={<CheckBox checked="" value="CSS" onChange={handleCheck} />}
        />
        <FormControlLabel
        label="JavaScript"
        control={<CheckBox checked="" value="JavaScript" onChange={handleCheck} />}
        />
    </FormGroup>
    <FormHelperText>Invalid selection</FormHelperText/>
    </FormControl>

10. Switch - toggle like on/off - example is Dark Mode
    <FormLabel label="Dark Mode" control={<Switch checked={value} onChange={e => e.target.value}/>}></FormLabel>

11. Rating - star rating, it accept e and newValue
    const handleChange(e, newValue){
        setValue(newValue)
    }
    <Stack>
        <Rating 
        value={value} 
        onChange={handleChange} 
        precision="0.5"
        icon={<FavoriteIcon fontSize="inherit"/>}
        emptyIcon={<FavoriteBorderIcon fontSize="inherit"/>}
        readOnly
        highlightSelectedOnly
        />
    </Stack>